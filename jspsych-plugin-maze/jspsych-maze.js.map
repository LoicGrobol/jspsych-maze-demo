{
    "version": 3,
    "file": "jspsych-maze.js",
    "sources": [
        "../package.json",
        "../src/index.ts"
    ],
    "sourcesContent": [
        "{\n  \"name\": \"@jspsych-contrib/plugin-maze\",\n  \"version\": \"0.0.1\",\n  \"description\": \"A jsPsych plugin for running Maze experiments\",\n  \"type\": \"module\",\n  \"main\": \"dist/index.cjs\",\n  \"exports\": {\n    \"import\": \"./dist/index.js\",\n    \"require\": \"./dist/index.cjs\"\n  },\n  \"typings\": \"dist/index.d.ts\",\n  \"unpkg\": \"dist/index.browser.min.js\",\n  \"files\": [\n    \"src\",\n    \"dist\"\n  ],\n  \"source\": \"src/index.ts\",\n  \"scripts\": {\n    \"test\": \"jest\",\n    \"test:watch\": \"npm test -- --watch\",\n    \"tsc\": \"tsc\",\n    \"build\": \"rollup --config\",\n    \"build:watch\": \"npm run build -- --watch\",\n    \"dev-serve\": \"concurrently \\\"npm run build -- --watch\\\" \\\"serve\\\"\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/jspsych/jspsych-contrib.git\",\n    \"directory\": \"packages/plugin-maze\"\n  },\n  \"author\": {\n    \"name\": \"Morgan Grobol\",\n    \"url\": \"https://lgrobol.bzh\"\n  },\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/jspsych/jspsych-contrib/issues\"\n  },\n  \"homepage\": \"https://github.com/jspsych/jspsych-contrib/tree/main/packages/plugin-maze\",\n  \"peerDependencies\": {\n    \"jspsych\": \">=8.0.0\"\n  },\n  \"devDependencies\": {\n    \"@jspsych/config\": \"^3.2.2\",\n    \"@jspsych/test-utils\": \"^1.0.0\",\n    \"concurrently\": \"^9.1.2\",\n    \"jspsych\": \"^8.0.0\",\n    \"serve\": \"^14.2.4\"\n  }\n}\n",
        "import { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\nimport { KeyboardListener } from \"jspsych/dist/modules/plugin-api/KeyboardListenerAPI\";\n\nimport { version } from \"../package.json\";\n\nconst info = <const>{\n  name: \"maze\",\n  version: version,\n  parameters: {\n    /** Array of [word, foil] couples */\n    sentence: {\n      type: ParameterType.COMPLEX,\n      array: true,\n    },\n    canvas_size: {\n      type: ParameterType.STRING,\n      array: true,\n      pretty_name: \"Canvas size\",\n      default: [\"1280px\", \"960px\"],\n    },\n\n    /** Whether to stop the trial on the first error.*/\n    halt_on_error: {\n      type: ParameterType.BOOL,\n      pretty_name: \"Halt on error\",\n      default: false,\n    },\n    /** How long to wait on a blank screen before displaying the next word. */\n    inter_word_interval: {\n      type: ParameterType.INT,\n      pretty_name: \"Inter-words interval\",\n      default: 0,\n    },\n    keys: {\n      type: ParameterType.COMPLEX,\n      pretty_name: \"Validation keys\",\n      default: { left: \"f\", right: \"j\" },\n      nested: {\n        left: {\n          type: ParameterType.STRING,\n          pretty_name: \"Left key\",\n        },\n        right: {\n          type: ParameterType.STRING,\n          pretty_name: \"Right key\",\n        },\n      },\n    },\n    /** The minimum time (in ms) before the subject is allowed to chose a word. */\n    pre_answer_interval: {\n      type: ParameterType.INT,\n      pretty_name: \"Waiting time\",\n      default: 0,\n    },\n    translate_origin: {\n      type: ParameterType.BOOL,\n      pretty_name: \"Translate origin\",\n      default: true,\n    },\n  },\n  data: {\n    sentence: {\n      type: ParameterType.STRING,\n    },\n    events: {\n      type: ParameterType.COMPLEX,\n      array: true,\n      nested: {\n        correct: { type: ParameterType.BOOL },\n        foil: { type: ParameterType.STRING },\n        rt: { type: ParameterType.INT },\n        side: { type: ParameterType.STRING },\n        word: { type: ParameterType.STRING },\n        word_number: { type: ParameterType.INT },\n      },\n    },\n  },\n  // prettier-ignore\n  citations: '__CITATIONS__',\n};\n\ntype Info = typeof info;\n\ninterface Response {\n  correct: boolean;\n  foil: string;\n  rt: number;\n  side: \"left\" | \"right\";\n  word: string;\n}\n\n/**\n * **maze**\n *\n * A jsPsych plugin for running Maze experiments\n *\n * @author Morgan Grobol\n * @see {@link https://github.com/jspsych/jspsych-contrib/packages/plugin-maze/README.md}}\n */\nclass MazePlugin implements JsPsychPlugin<Info> {\n  static info = info;\n  display_element: HTMLElement;\n  canvas_colour: string;\n  center_display: HTMLElement;\n  font_colour: string;\n  keyboard_listener: KeyboardListener;\n  keys: { left: string; right: string };\n  left_display: HTMLElement;\n  right_display: HTMLElement;\n  style: HTMLElement;\n  text_display: HTMLElement;\n\n  constructor(private jsPsych: JsPsych) {}\n\n  trial(display_element: HTMLElement, trial: TrialType<Info>) {\n    this.display_element = display_element;\n    this.display_element.innerHTML = `\n      <div id=\"jspsych-maze-display_parent\">\n        <div id=\"jspsych-maze-center_display\" class=\"jspsych-maze-display\"></div>\n        <div id=\"jspsych-maze-text_display\" class=\"jspsych-maze-display\"></div>\n        <div id=\"jspsych-maze-left_display\" class=\"jspsych-maze-display jspsy-maze-answer\"></div>\n        <div id=\"jspsych-maze-right_display\" class=\"jspsych-maze-display jspsy-maze-answer\"></div>\n      </div>`;\n    this.style = document.createElement(\"style\");\n    this.style.innerHTML = `\n      #jspsych-maze-display_parent {\n        position: relative;\n        width: ${trial.canvas_size[0]};\n        height: ${trial.canvas_size[1]};\n      }\n      .jspsych-maze-display{\n        position: absolute;\n      }\n      .jspsych-maze-answer{\n        width: max-content;\n      }\n      #jspsych-maze-center_display {\n        top: 50%;\n        transform: translateY(-50%);\n        width: 100%;\n      }\n      #jspsych-maze-text_display {\n        top: 50%;\n        transform: translateY(-50%) translateY(-5em);\n        width: 100%;\n      }\n      #jspsych-maze-left_display {\n        left: calc(100% / 3);\n        top: 50%;\n        transform: translate(-50%, -50%);\n      }\n      #jspsych-maze-right_display {\n        left: calc(2 * (100% / 3));\n        top: 50%;\n        transform: translate(-50%, -50%);\n      }\n      `;\n    document.head.appendChild(this.style);\n    this.center_display = document.getElementById(\"jspsych-maze-center_display\");\n    this.left_display = document.getElementById(\"jspsych-maze-left_display\");\n    this.right_display = document.getElementById(\"jspsych-maze-right_display\");\n    this.text_display = document.getElementById(\"jspsych-maze-text_display\");\n\n    this.font_colour = trial.font_colour;\n    this.keys = trial.keys;\n\n    const results: {\n      sentence: string;\n      events: Array<Response>;\n    } = {\n      sentence: trial.sentence.map((x) => x[0]).join(\" \"),\n      events: [],\n    };\n\n    let last_display_time: number;\n    let word_number = 0;\n    const word_on_the_left = Array.from(\n      { length: trial.sentence.length },\n      (_value, _index) => Math.random() < 0.5\n    );\n\n    const step_display = (n: number) => {\n      const [word, foil] = trial.sentence[n];\n      const [left, right] = word_on_the_left[n] ? [word, foil] : [foil, word];\n      this.display_words(left, right);\n    };\n\n    const after_response = (info: { rt: number; key: string }) => {\n      const rt = info.rt - last_display_time;\n      const correct = word_on_the_left[word_number]\n        ? info.key == this.keys.left\n        : info.key == this.keys.right;\n      const [word, foil] = trial.sentence[word_number];\n      // FIXME: maybe we want to pre-allocate trial_data.events for more reactivity?\n      results.events.push({\n        correct: correct,\n        foil: foil,\n        rt: rt,\n        side: word_on_the_left[word_number] ? \"left\" : \"right\",\n        word: word,\n      } as Response);\n      if (word_number < trial.sentence.length - 1 && (correct || !trial.halt_on_error)) {\n        word_number++;\n        this.clear_display();\n        this.jsPsych.pluginAPI.setTimeout(\n          () => step_display(word_number),\n          trial.inter_word_interval\n        );\n        last_display_time = info.rt + trial.inter_word_interval;\n      } else {\n        end_trial();\n      }\n    };\n\n    const start_trial = (info: { rt: number; key: string }) => {\n      step_display(0);\n      last_display_time = 0;\n      // TODO: there's trickery here: by enforcing at least inter_word_interval beteween keypresses,\n      // we ensure that keypresses before display will be ignored (since the display happens at\n      // inter_word_interval).\n      this.keyboard_listener = this.jsPsych.pluginAPI.getKeyboardResponse({\n        callback_function: after_response,\n        valid_responses: [this.keys.left, this.keys.right],\n        rt_method: \"performance\",\n        persist: true,\n        allow_held_key: false,\n        minimum_valid_rt: trial.inter_word_interval + trial.pre_answer_interval,\n      });\n    };\n\n    const end_trial = () => {\n      this.jsPsych.pluginAPI.cancelKeyboardResponse(this.keyboard_listener);\n      this.jsPsych.finishTrial(results);\n    };\n\n    const setup = () => {\n      this.display_message(`Press ${this.keys.left} or ${this.keys.right} to start`);\n      this.keyboard_listener = this.jsPsych.pluginAPI.getKeyboardResponse({\n        callback_function: start_trial,\n        valid_responses: [this.keys.left, this.keys.right],\n        persist: false,\n        allow_held_key: false,\n      });\n    };\n\n    setup();\n  }\n\n  clear_display() {\n    this.center_display.innerHTML = \"\";\n    this.left_display.innerHTML = \"\";\n    this.right_display.innerHTML = \"\";\n    this.text_display.innerHTML = \"\";\n  }\n\n  display_words(left_word: string, right_word: string, text: string | null = null) {\n    this.clear_display();\n\n    this.left_display.innerHTML = left_word;\n    this.right_display.innerHTML = right_word;\n\n    if (null !== text) {\n      this.text_display.innerHTML = text;\n    }\n  }\n\n  display_message(message: string) {\n    this.clear_display();\n    this.center_display.innerHTML = message;\n  }\n}\n\nexport default MazePlugin;\n"
    ],
    "names": [],
    "mappings": ";;;EAEE,IAAW,OAAA,GAAA,OAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IC4EA,SAAA,EAAA;EAAA;;KAAe;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
}